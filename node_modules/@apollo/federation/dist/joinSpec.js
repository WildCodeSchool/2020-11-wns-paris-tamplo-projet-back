"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getJoins = void 0;
const graphql_1 = require("graphql");
const FieldSetScalar = new graphql_1.GraphQLScalarType({
    name: 'join__FieldSet',
});
const JoinGraphDirective = new graphql_1.GraphQLDirective({
    name: "join__graph",
    locations: [graphql_1.DirectiveLocation.ENUM_VALUE],
    args: {
        name: {
            type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString),
        },
        url: {
            type: new graphql_1.GraphQLNonNull(graphql_1.GraphQLString),
        },
    }
});
function getJoinGraphEnum(serviceList) {
    const nameMap = new Map();
    const sanitizedServiceNames = Object.create(null);
    function uniquifyAndSanitizeGraphQLName(name) {
        const alphaNumericUnderscoreOnly = name.replace(/[^_a-zA-Z0-9]/g, '_');
        const noNumericFirstChar = alphaNumericUnderscoreOnly.match(/^[0-9]/)
            ? '_' + alphaNumericUnderscoreOnly
            : alphaNumericUnderscoreOnly;
        const noUnderscoreNumericEnding = noNumericFirstChar.match(/_[0-9]+$/)
            ? noNumericFirstChar + '_'
            : noNumericFirstChar;
        const toUpper = noUnderscoreNumericEnding.toLocaleUpperCase();
        const nameCount = nameMap.get(toUpper);
        if (nameCount) {
            nameMap.set(toUpper, nameCount + 1);
            const uniquified = `${toUpper}_${nameCount + 1}`;
            nameMap.set(uniquified, 1);
            sanitizedServiceNames[name] = uniquified;
            return uniquified;
        }
        else {
            nameMap.set(toUpper, 1);
            sanitizedServiceNames[name] = toUpper;
            return toUpper;
        }
    }
    return {
        sanitizedServiceNames,
        JoinGraphEnum: new graphql_1.GraphQLEnumType({
            name: 'join__Graph',
            values: Object.fromEntries(serviceList.map((service) => [
                uniquifyAndSanitizeGraphQLName(service.name),
                { value: service },
            ])),
        }),
    };
}
function getJoinFieldDirective(JoinGraphEnum) {
    return new graphql_1.GraphQLDirective({
        name: 'join__field',
        locations: [graphql_1.DirectiveLocation.FIELD_DEFINITION],
        args: {
            graph: {
                type: JoinGraphEnum,
            },
            requires: {
                type: FieldSetScalar,
            },
            provides: {
                type: FieldSetScalar,
            },
        },
    });
}
function getJoinOwnerDirective(JoinGraphEnum) {
    return new graphql_1.GraphQLDirective({
        name: 'join__owner',
        locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE],
        args: {
            graph: {
                type: new graphql_1.GraphQLNonNull(JoinGraphEnum),
            },
        },
    });
}
function getJoins(serviceList) {
    const { sanitizedServiceNames, JoinGraphEnum } = getJoinGraphEnum(serviceList);
    const JoinFieldDirective = getJoinFieldDirective(JoinGraphEnum);
    const JoinOwnerDirective = getJoinOwnerDirective(JoinGraphEnum);
    const JoinTypeDirective = new graphql_1.GraphQLDirective({
        name: 'join__type',
        locations: [graphql_1.DirectiveLocation.OBJECT, graphql_1.DirectiveLocation.INTERFACE],
        isRepeatable: true,
        args: {
            graph: {
                type: new graphql_1.GraphQLNonNull(JoinGraphEnum),
            },
            key: {
                type: FieldSetScalar,
            },
        },
    });
    return {
        sanitizedServiceNames,
        FieldSetScalar,
        JoinTypeDirective,
        JoinFieldDirective,
        JoinOwnerDirective,
        JoinGraphEnum,
        JoinGraphDirective,
    };
}
exports.getJoins = getJoins;
//# sourceMappingURL=joinSpec.js.map